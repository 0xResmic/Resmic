{"mappings":"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","sources":["src/index.js","src/Components/CryptoPayment.jsx","node_modules/@parcel/runtime-js/lib/runtime-19557d09d4e20e29.js","src/Components/Constant/Constant.js","src/Components/EVM/EVMProcess.js","src/Components/EVM/ConnectMeta.js","src/Components/Constant/LivePrice.js","src/Components/Starknet/StarknetProcess.js","src/Components/Starknet/StarknetHelper.js","src/Components/Nibiru/NibiruProcess.js","src/Components/Solana/SolanaProcess.js"],"sourcesContent":["export { default as CryptoPayment } from \"./Components/CryptoPayment\";\nexport {Chains, Tokens} from './Components/Constant/Constant';\n","import React, { useState } from 'react'\nimport '../CSS/SelectBlockchain.css'\nimport resmiclogo from '../assets/resmiclogo.png'\nimport { SupportedTokens } from './Constant/Constant';\nimport { makeEVMPayment } from './EVM/EVMProcess';\nimport {ToastContainer, toast } from \"react-toastify\";\nimport { Select, Button, Input, Tooltip } from \"antd\";\nimport \"../CSS/EVMComponent.css\"\nimport \"../CSS/PaymentPopUp.css\";\nimport \"../CSS/Loader.css\";\nimport { makeStarknetPayment } from './Starknet/StarknetProcess';\nimport { makeNibiruPayment } from './Nibiru/NibiruProcess';\nimport { makeSolanaPayment } from './Solana/SolanaProcess';\n\n/* global BigInt */ //@note Do note delete this.\n\n/**\n * * Master component to navigate as per blockchain selection.\n * @param {String} Address // Address where funds will be get transferred\n * @param {Array} Tokens  // Array of tokens user want to accept\n * @param {Array} Chain  // Array of blockchain user want to accept\n * @param {INT} Amount  // Amount to accept in USD, INT/FLOAT\n * @param {INT} noOfBlockConformation // No. of Block Conformation to verify the transaction\n * @param {bool} setPaymentStatus // Returns the payment completion status of the tx.  // Customise CSS for buttons.\n * @param {Style} CSS  // Customise CSS for buttons.\n * @returns React componen\n */\nfunction CryptoPayment({Address, Tokens, Chains, Amount, noOfBlockConformation, setPaymentStatus, Style = {displayName: \"Make Payment\", \nbackgroundColor: \"#007bff\",\ncolor: \"#fff\",\nborder: \"none\",\npadding: \"10px 20px\",\nborderRadius: \"4px\",\nfontSize: \"18px\",\ncursor: \"pointer\"},}) {\n    const [isPopUpOpen, setIsPopUpOpen] = useState(true);\n    const [selectedBlockchain, setSelectedBlockchain] = useState(\"\");\n    const [selectedToken, setSelectedToken] = useState(\"\");\n    const [btnName, setBtnName] = useState(\"Make Payment\");\n    const [isLoading, setIsLoading] = useState(false);\n    const [isAllSelected, setIsAllSelected] = useState(false); // If Bockchain and Token are selected & Clicked on make payment, The Dropdown will be disabled.\n    const [currentTokenPrice, setCurrentTokenPrice] = useState(\"\"); // To display the conversion rate for token.\n\n    \n    /**\n     * Navigates the selections to selected blockchain.\n     */\n    const makePayment = async() => {\n        if (selectedBlockchain ===\"\" || selectedToken === \"\"){\n            toast.warning('Please select payment method', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n        }\n        else {\n            switch (selectedBlockchain) {\n                case \"Starknet\":\n                    console.log(\"Redirect to Starknet\");\n                    setIsLoading(true)\n                    let makePaymentStarknet = await makeStarknetPayment(selectedToken, Address, Amount, noOfBlockConformation);\n                    setPaymentStatus(makePaymentStarknet);\n                    if (makePaymentStarknet) setIsPopUpOpen(false);\n                    setIsLoading(false)\n                    break;\n\n                case \"Solana\":\n                    console.log(\"Redirect to Starknet\");\n                    setIsLoading(true)\n                    let makePaymentSolana = await makeSolanaPayment(selectedToken, Address, Amount, noOfBlockConformation);\n                    setPaymentStatus(makePaymentSolana);\n                    if (makePaymentSolana) setIsPopUpOpen(false);\n                    setIsLoading(false)\n                    break;\n\n                case \"Nibiru\":\n                    console.log(\"Redirect to Nibiru\")\n                    setIsLoading(true);\n                    let makeNibiruPay = await makeNibiruPayment(selectedToken, Address, Amount, noOfBlockConformation);\n                    setPaymentStatus(makeNibiruPay);\n                    if (makeNibiruPay) setIsPopUpOpen(false)                   \n                    setIsLoading(false)\n                    break;\n                    \n                default: // All EVM blockchain will be redirected as default.\n                    setIsLoading(true)\n                    let makePaymentEVM = await makeEVMPayment(selectedBlockchain, selectedToken, Address, Amount, noOfBlockConformation);\n                    setPaymentStatus(makePaymentEVM);\n                    if (makePaymentEVM) setIsPopUpOpen(false)                   \n                    setIsLoading(false)\n                    break;\n            }\n        }\n    }\n\n\n    return (\n    <>\n        <button style={Style} onClick={() => setIsPopUpOpen(true)}>{Style?.displayName}</button>\n\n        {isPopUpOpen && (\n            <div className=\"popup-container\">\n            <div className=\"popup-content\">\n                <div className=\"resmic-logo\">\n                    <img src={resmiclogo} alt=\"resmic image\"/>\n                    <span className=\"close\" onClick={() => setIsPopUpOpen(false)}>&times;</span>\n                </div>\n                <div className=\"modal-contents\">\n                    <div className=\"inputs\">\n                    <div className=\"popup-heading\">\n                        {/* <span>Pay amount</span> */}\n                        <span className='AmountPayableSpan'>AMOUNT PAYABLE</span>\n                        <div className=\"amount\">${Amount.toFixed(2)}</div>\n                    </div>\n                    \n                    {/* Select Blockchian DropDown */}\n                    <div className=\"inputGroup\">\n                    <label className=\"inputHeading\">Blockchain</label>\n                        <Select placeholder=\"Select Blockchain\" showSearch onChange={setSelectedBlockchain }\n                            size='large'\n                        >\n                            {Object.keys(Chains).map((chain) => (\n                                <option key={Chains[chain].name} value={Chains[chain].name}>{Chains[chain].name}</option>\n                            ))}\n                        </Select>\n                    </div>\n\n                    \n                    {/* Select Tokens DropDown */}\n                    <div className=\"inputGroup\">\n                        <label className=\"inputHeading\">Token</label>\n                        <Select className='selectDropdown' id=\"\" placeholder=\"Select Token\" showSearch  onChange={setSelectedToken} disabled={isAllSelected}\n                            size='large'\n                        >\n                            {Tokens.filter(obj => SupportedTokens[selectedBlockchain].includes(obj.name)).map(obj => (\n                                <option  key={obj.name} value={obj.name}>\n                                        {obj.name}\n                                </option>\n                            ))}\n                        </Select>\n                    </div>\n\n                    <div className=\"live-token-price\">{currentTokenPrice}</div>\n                    <div className=\"inputGroup\">\n                        <button onClick={makePayment}>\n                        {!isLoading && btnName}\n                        {isLoading &&\n                            <div className=\"spinner\">\n                            <div className=\"bar1\"></div>\n                            <div className=\"bar2\"></div>\n                            <div className=\"bar3\"></div>\n                            <div className=\"bar4\"></div>\n                            <div className=\"bar5\"></div>\n                            <div className=\"bar6\"></div>\n                            <div className=\"bar7\"></div>\n                            <div className=\"bar8\"></div>\n                            <div className=\"bar9\"></div>\n                            <div className=\"bar10\"></div>\n                            <div className=\"bar11\"></div>\n                            <div className=\"bar12\"></div>\n                            </div>\n                        }\n                        </button>\n                    </div>\n                    </div>\n                </div>\n            </div>\n            </div>\n        )}\n        <ToastContainer/>\n    </>\n  )\n}\n\nexport default CryptoPayment","module.exports = new __parcel__URL__(\"resmiclogo.4179cff7.png\").toString();","export const SupportedBlockchains = [\n    \"Ethereum\",'Polygon',\"Starknet\", \"Binance\", \"Optimism\", \"Sepolia\", \"Nibiru\", \"XDC-Network\",\n];\nexport const SupportedTokens = {\n    // EVM Blockchains. \n    \"Ethereum\":[\"ETH\", \"USDT\", \"USDC\", \"MATIC\",\"DOGE\", ],\n    \"Polygon\":[ \"MATIC\",\"USDT\", \"USDC\", \"ETH\",\"DOGE\", ],\n    \"Binance\":[\"BNB\",\"BUSD\", \"USDC\", \"ETH\", \"DOGE\", ],\n    \"Binance-TestNet\":[\"BNB\",\"BUSD\", \"USDC\", \"ETH\", \"DOGE\", ],\n    \"Optimism\":[\"OP\",\"USDT\", \"USDC\", \"ETH\", \"MATIC\",\"DOGE\", ],\n    \"Sepolia\":[\"SETH\",\"USDT\", 'BNB', 'DAI'],\n    \n    \"XDC-Network\":[\"XDC\", \"USDT\" ],\n\n    // Non-EVM Blockchains.\n    \"Starknet\":[\"STARK\",\"USDT\", \"USDC\", \"ETH\", \"GETH\", \"BTC\" ],\n    // \"Nibiru\":[\"NIBI\",\"BTC\", \"ETH\"],\n    \"Solana\":[\"SOL\", \"ETH\", \"USDT\", \"USDC\", \"BTC\"],\n    \n    \"\":[\"\"], //@note Do not remove this line.\n};\n\nexport const Chains = {\n    \"Ethereum\" : {\"name\": \"Ethereum\", \"description\": \"\", \"id\": \"0x1\", \"img\":\"\"},\n    \"Polygon\" : {\"name\": \"Polygon\", \"description\": \"\", \"id\": \"0x89\", \"img\":\"\"},\n    \"Binance\" : {\"name\": \"Binance\", \"description\": \"\", \"id\": \"0x38\", \"img\":\"\"},\n    \"Binance-TestNet\" : {\"name\": \"Binance\", \"description\": \"\", \"id\": \"0x61\", \"img\":\"\"},\n    \"Optimism\" : {\"name\": \"Optimism\", \"description\": \"\", \"id\": \"0xa\", \"img\":\"\"},\n    \"Sepolia\" : {\"name\": \"Sepolia\", \"description\": \"\", \"id\": \"0xaa36a7\", \"img\":\"\"},\n    \n    \"XDC-Network\" : {\"name\": \"XDC-Network\", \"description\": \"\", \"id\": \"0x32\", \"img\":\"\"},\n    \n    \"Starknet\" : {\"name\": \"Starknet\", \"description\": \"\", \"id\": \"\", \"img\":\"\"},\n    \"Nibiru\" : {\"name\": \"Nibiru\", \"description\": \"\", \"id\": \"\", \"img\":\"\"},\n    \"Solana\" : {\"name\": \"Solana\", \"description\": \"\", \"id\": \"\", \"img\":\"\"},\n\n};\nexport const Tokens = {\n    // If Tokens is stable conin, id == chainId to identify is it native token. else -1\n    USDT: {\"name\": \"USDT\", \"dname\":\"USDT\", \"type\": \"stable\", \"id\": \"-1\", \"description\": \"\"},\n    BUSD: {\"name\": \"BUSD\", \"dname\":\"BUSDT\", \"type\": \"stable\", \"id\": \"-1\"},\n    USDC: {\"name\": \"USDC\", \"dname\":\"USDC\", \"type\": \"stable\", \"id\": \"-1\"},\n    PUSH: {\"name\": \"PUSH\", \"dname\":\"push\", \"type\": \"unstable\", \"id\": \"\"},\n    MATIC: {\"name\": \"MATIC\", \"dname\":\"matic-network\", \"type\": \"unstable\", \"id\": \"0x89\"},\n    ETH: {\"name\": \"ETH\", \"dname\":\"ethereum\", \"type\": \"unstable\", \"id\": \"0x1\"},\n    SETH: {\"name\": \"SETH\", \"dname\":\"ethereum\", \"type\": \"unstable\", \"id\": \"0xaa36a7\"}, // Sepolia ETH\n    NIBI: {\"name\": \"NIBI\", \"dname\":\"nibiru\", \"type\": \"unstable\", \"id\": \"\"},\n    DOGE: {\"name\": \"DOGE\", \"dname\":\"doge\", \"type\": \"unstable\", \"id\": \"\"},\n    STARK: {\"name\": \"STARK\", \"dname\":\"starknet\", \"type\": \"unstable\", \"id\": \"\"},\n    BNB: {\"name\": \"BNB\", \"dname\":\"binancecoin\", \"type\": \"unstable\", \"id\": \"0x38\"},\n    TBNB: {\"name\": \"TBNB\", \"dname\":\"binancecoin\", \"type\": \"unstable\", \"id\": \"0x61\"},\n    BTC: {\"name\": \"BTC\", \"dname\":\"Bitcoin\", \"type\": \"unstable\", \"id\": \"\"},\n    DAI: {\"name\": \"DAI\", \"dname\":\"bitcoin\", \"type\": \"unstable\", \"id\": \"\"},\n\n    XDC: {\"name\": \"XDC\", \"dname\":\"xdce-crowd-sale\", \"type\": \"unstable\", \"id\": \"0x32\"},\n};\n/**\n * Supported {Verified } ERC 20 token address\n */\nexport const TokenAddress = {\n    \n    \"Ethereum\":{\n        \"USDT\": \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n        \"USDC\": \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n        \"DAI\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n        \"BUSD\": \"0x4fabb145d64652a948d72533023f6e7a623c7c53\",\n        \"Bitcoin\": \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\",\n        \"MATIC\": \"0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0\",\n        \"BNB\": \"0xB8c77482e45F1F44dE1745F52C74426C631bDD52\",\n    },\n  \n    \"Polygon\":{\n        \"USDT\": \"0xc2132D05D31c914a87C6611C10748AEb04B58e8F\",\n        \"USDC\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\n        \"DAI\": \"0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063\",\n        \"BUSD\": \"0xdab529f40e671a1d4bf91361c21bf9f0c9712ab7\",\n        \"Bitcoin\": \"0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6\",\n        \"BNB\": \"0x3BA4c387f786bFEE076A58914F5Bd38d668B42c3\",\n        \"ETH\": \"0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619\",\n      },\n      \n    \"Binance\":{\n        \"BUSD\": \"0xe9e7cea3dedca5984780bafc599bd69add087d56\",\n        \"DAI\": \"0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3\",\n        // \"BSC-USD\": \"0x55d398326f99059fF775485246999027B3197955\",\n        \"USDT\": \"0x55d398326f99059fF775485246999027B3197955\",// BSC-USD\n        \"USDC\": \"0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d\",\n        \"DOGE\": \"0xbA2aE424d960c26247Dd6c32edC70B295c744C43\", // dogecoin \n        \"MATIC\": \"0xCC42724C6683B7E57334c4E856f4c9965ED682bD\",\n        \"ETH\": \"0x2170Ed0880ac9A755fd29B2688956BD959F933F8\",\n        \"BTC\": \"0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c\",\n    },\n  \n    \"Optimism\":{\n        \"USDT\": \"0x94b008aA00579c1307B0EF2c499aD98a8ce58e58\",\n        \"USDC\": \"0x7F5c764cBc14f9669B88837ca1490cCa17c31607\",\n        \"BTC\": \"0x68f180fcCe6836688e9084f035309E29Bf0A2095\",\n        \"DAI\": \"0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1\",\n        \"Optimism\": \"0x4200000000000000000000000000000000000042\",\n  \n    },\n  \n    \"Goerli\":{\n        \"USDC\":\"0x65aFADD39029741B3b8f0756952C74678c9cEC93\",\n        \"DAI\":\"0x75Ab5AB1Eef154C0352Fc31D2428Cef80C7F8B33\",        \n    },\n\n    \"Sepolia\":{\n        \"USDC\":\"0x65aFADD39029741B3b8f0756952C74678c9cEC93\",\n        \"USDT\":\"0x65aFADD39029741B3b8f0756952C74678c9cEC93\",\n        \"DAI\":\"0x36e08F3A09fEf0e48261226dcA3084A1FBE20aFe\",        \n        \"BNB\":\"0x75Ab5AB1Eef154C0352Fc31D2428Cef80C7F8B33\",        \n    },\n\n    \"Starknet\":{\n        \"STARK\": \"0x4718f5a0Fc34cC1AF16A1cdee98fFB20C31f5cD61D6Ab07201858f4287c938D\",\n        \"ETH\": \"0x49d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\" , \n        \"DAI\"  : \"0x0dA114221cb83fa859DBdb4C44bEeaa0BB37C7537ad5ae66Fe5e0efD20E6eB3\", \n        \"USDC\" : \"0x053C91253BC9682c04929cA02ED00b3E423f6710D2ee7e0D5EBB06F3eCF368A8\", \n        \"USDT\" : \"0x68F5c6a61780768455de69077E07e89787839bf8166dEcfBf92B645209c0fB8\", \n        \"WBTC\" : \"0x3Fe2b97C1Fd336E750087D68B9b867997Fd64a2661fF3ca5A7C771641e8e7AC\",\n    },\n\n    \"Solana\":{\n        \"USDC\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n        \"USDT\": \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\",\n        \"WETH\": \"2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk\",\n        \"WBTC\": \"9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E\",\n        \n    },\n    \"XDC-Network\":{\n        // \"WXDC\": \"0x951857744785e80e2de051c32ee7b25f9c458c42\",\n        \"USDT\": \"0xd4b5f10d61916bd6e0860144a91ac658de8a1437\",\n    },\n}\n\n/**\n* ERC20 Smart Contract ABI for EVM blockchains.\n*/\nexport const ERC20_ABI  = [\n    {\n      constant: true,\n      inputs: [],\n      name: \"name\",\n      outputs: [{ name: \"\", type: \"string\" }],\n      payable: false,\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      constant: false,\n      inputs: [\n        { name: \"_spender\", type: \"address\" },\n        { name: \"_value\", type: \"uint256\" },\n      ],\n      name: \"approve\",\n      outputs: [],\n      payable: false,\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      constant: false,\n      inputs: [\n        { name: \"_from\", type: \"address\" },\n        { name: \"_to\", type: \"address\" },\n        { name: \"_value\", type: \"uint256\" },\n      ],\n      name: \"transferFrom\",\n      outputs: [],\n      payable: false,\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n  \n    {\n      constant: true,\n      inputs: [],\n      name: \"decimals\",\n      outputs: [{ name: \"\", type: \"uint256\" }],\n      payable: false,\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      constant: true,\n      inputs: [\n        { name: \"\", type: \"address\" },\n        { name: \"\", type: \"address\" },\n      ],\n      name: \"allowed\",\n      outputs: [{ name: \"\", type: \"uint256\" }],\n      payable: false,\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      constant: true,\n      inputs: [],\n      name: \"symbol\",\n      outputs: [{ name: \"\", type: \"string\" }],\n      payable: false,\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      constant: false,\n      inputs: [\n        { name: \"_to\", type: \"address\" },\n        { name: \"_value\", type: \"uint256\" },\n      ],\n      name: \"transfer\",\n      outputs: [],\n      payable: false,\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      constant: true,\n      inputs: [\n        { name: \"_owner\", type: \"address\" },\n        { name: \"_spender\", type: \"address\" },\n      ],\n      name: \"allowance\",\n      outputs: [{ name: \"remaining\", type: \"uint256\" }],\n      payable: false,\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        { indexed: true, name: \"owner\", type: \"address\" },\n        { indexed: true, name: \"spender\", type: \"address\" },\n        { indexed: false, name: \"value\", type: \"uint256\" },\n      ],\n      name: \"Approval\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        { indexed: true, name: \"from\", type: \"address\" },\n        { indexed: true, name: \"to\", type: \"address\" },\n        { indexed: false, name: \"value\", type: \"uint256\" },\n      ],\n      name: \"Transfer\",\n      type: \"event\",\n    },\n    { anonymous: false, inputs: [], name: \"Pause\", type: \"event\" },\n    { anonymous: false, inputs: [], name: \"Unpause\", type: \"event\" },\n];\n/**\n* ERC20 Smart Contract ABI for Starknet Blockchain.\n*/\nexport const STARKNET_ERC20_ABI = [\n  {\n      \"members\": [\n          {\n              \"name\": \"low\",\n              \"offset\": 0,\n              \"type\": \"felt\"\n          },\n          {\n              \"name\": \"high\",\n              \"offset\": 1,\n              \"type\": \"felt\"\n          }\n      ],\n      \"name\": \"Uint256\",\n      \"size\": 2,\n      \"type\": \"struct\"\n  },\n  {\n      \"data\": [\n          {\n              \"name\": \"from_\",\n              \"type\": \"felt\"\n          },\n          {\n              \"name\": \"to\",\n              \"type\": \"felt\"\n          },\n          {\n              \"name\": \"value\",\n              \"type\": \"Uint256\"\n          }\n      ],\n      \"keys\": [],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n  },\n  {\n      \"data\": [\n          {\n              \"name\": \"owner\",\n              \"type\": \"felt\"\n          },\n          {\n              \"name\": \"spender\",\n              \"type\": \"felt\"\n          },\n          {\n              \"name\": \"value\",\n              \"type\": \"Uint256\"\n          }\n      ],\n      \"keys\": [],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n  },\n  {\n      \"inputs\": [\n          {\n              \"name\": \"name\",\n              \"type\": \"felt\"\n          },\n          {\n              \"name\": \"symbol\",\n              \"type\": \"felt\"\n          },\n          {\n              \"name\": \"decimals\",\n              \"type\": \"felt\"\n          },\n          {\n              \"name\": \"initial_supply\",\n              \"type\": \"Uint256\"\n          },\n          {\n              \"name\": \"recipient\",\n              \"type\": \"felt\"\n          }\n      ],\n      \"name\": \"constructor\",\n      \"outputs\": [],\n      \"type\": \"constructor\"\n  },\n  {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n          {\n              \"name\": \"name\",\n              \"type\": \"felt\"\n          }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n  },\n  {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n          {\n              \"name\": \"symbol\",\n              \"type\": \"felt\"\n          }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n  },\n  {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n          {\n              \"name\": \"totalSupply\",\n              \"type\": \"Uint256\"\n          }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n  },\n  {\n      \"inputs\": [],\n      \"name\": \"decimals\",\n      \"outputs\": [\n          {\n              \"name\": \"decimals\",\n              \"type\": \"felt\"\n          }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n  },\n  {\n      \"inputs\": [\n          {\n              \"name\": \"account\",\n              \"type\": \"felt\"\n          }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n          {\n              \"name\": \"balance\",\n              \"type\": \"Uint256\"\n          }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n  },\n  {\n      \"inputs\": [\n          {\n              \"name\": \"owner\",\n              \"type\": \"felt\"\n          },\n          {\n              \"name\": \"spender\",\n              \"type\": \"felt\"\n          }\n      ],\n      \"name\": \"allowance\",\n      \"outputs\": [\n          {\n              \"name\": \"remaining\",\n              \"type\": \"Uint256\"\n          }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n  },\n  {\n      \"inputs\": [\n          {\n              \"name\": \"recipient\",\n              \"type\": \"felt\"\n          },\n          {\n              \"name\": \"amount\",\n              \"type\": \"Uint256\"\n          }\n      ],\n      \"name\": \"transfer\",\n      \"outputs\": [\n          {\n              \"name\": \"success\",\n              \"type\": \"felt\"\n          }\n      ],\n      \"type\": \"function\"\n  },\n  {\n      \"inputs\": [\n          {\n              \"name\": \"sender\",\n              \"type\": \"felt\"\n          },\n          {\n              \"name\": \"recipient\",\n              \"type\": \"felt\"\n          },\n          {\n              \"name\": \"amount\",\n              \"type\": \"Uint256\"\n          }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [\n          {\n              \"name\": \"success\",\n              \"type\": \"felt\"\n          }\n      ],\n      \"type\": \"function\"\n  },\n  {\n      \"inputs\": [\n          {\n              \"name\": \"spender\",\n              \"type\": \"felt\"\n          },\n          {\n              \"name\": \"amount\",\n              \"type\": \"Uint256\"\n          }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [\n          {\n              \"name\": \"success\",\n              \"type\": \"felt\"\n          }\n      ],\n      \"type\": \"function\"\n  },\n  {\n      \"inputs\": [\n          {\n              \"name\": \"spender\",\n              \"type\": \"felt\"\n          },\n          {\n              \"name\": \"added_value\",\n              \"type\": \"Uint256\"\n          }\n      ],\n      \"name\": \"increaseAllowance\",\n      \"outputs\": [\n          {\n              \"name\": \"success\",\n              \"type\": \"felt\"\n          }\n      ],\n      \"type\": \"function\"\n  },\n  {\n      \"inputs\": [\n          {\n              \"name\": \"spender\",\n              \"type\": \"felt\"\n          },\n          {\n              \"name\": \"subtracted_value\",\n              \"type\": \"Uint256\"\n          }\n      ],\n      \"name\": \"decreaseAllowance\",\n      \"outputs\": [\n          {\n              \"name\": \"success\",\n              \"type\": \"felt\"\n          }\n      ],\n      \"type\": \"function\"\n  }\n]\n  ","// ✅ Connect wallet\n// ✅ Switch blockchain\n// ✅ Get network details\n// ✅ Calculate the tokens.\n// ✅ Handling big numbers.\n// ✅ Native Tokens\n// ✅ Block Confirmations.\n// ✅ Stable Coin\n// ✅ Approve token\n// ✅ Make payment\n// ✅ Check Confirmations\n// ✅ Return payment status.\n\nimport { Chains, ERC20_ABI, TokenAddress, Tokens } from \"../Constant/Constant\";\nimport { connectWalletFn, getProvider, getSigner, switchNetwork } from \"./ConnectMeta\";\nimport { ethers } from \"ethers\";\nimport BigNumber from \"bignumber.js\";\nimport {ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { getCurrentTokenPrice } from \"../Constant/LivePrice\";\n\n\n/**\n * * Main Function to handle all the EVM transaction.\n * @param {String} Blockchain // EVM Blockchain name\n * @param {String} Token // Token name\n * @param {String} Address_ // Wallet address to send funds.\n * @param {INT} Amount // Amount in USD\n * @param {INT} PaymentConfirmations // Wait for No. of blocks confirmations. Default 2\n * @returns {Bool} Payment Status\n */\nexport async function makeEVMPayment (Blockchain, Token, Address_, Amount, PaymentConfirmations=2) {\n    let Address = Address_.EVM;\n    let paymentStatus = false;\n    \n    // Connect Metamask Wallet, Switching network if necessary.\n    let connectWallet = await connectWalletFn();\n    let connectdUserAddress = connectWallet?.account\n\n    let connectedchainId = connectWallet?.chainId\n    console.log(\"connectedchainId\", connectedchainId)\n    let requiredChainID = Chains[Blockchain].id;\n    if(connectedchainId !== requiredChainID) { // Switching the networ if the users is on another network on Metamask.\n        await switchNetwork(requiredChainID)\n    }\n    /*\n        3 types of transactions\n        i. Native tokens\n        ii. Stable tokens\n        iii. Unstable tokens.\n    */\n    let tokenType = Tokens[Token]\n    if(tokenType?.id === requiredChainID) { // Handling Native tokens\n        let tokenSymbol = Tokens[Token]?.dname\n        let nativePayment = await nativeTokenPayment(Amount, Address, tokenSymbol, PaymentConfirmations)\n        paymentStatus = nativePayment;\n        return nativePayment\n    }\n    else if(tokenType?.type === \"stable\") { // Handling Stable tokens\n        console.log(\"here state is stable\")\n        let tokenAddress = TokenAddress\n        tokenAddress = tokenAddress[Blockchain][Token]\n        let stableTx = await requestERC20Payment(Amount, tokenAddress, connectdUserAddress, Address, PaymentConfirmations )\n        paymentStatus = stableTx\n        return stableTx;\n    }\n    else if (tokenType?.type === \"unstable\") { // Handling UnStable tokens\n        let tokenSymbol = Tokens[Token]?.dname;\n        let tokenAddress = TokenAddress\n        tokenAddress = tokenAddress[Blockchain][Token]\n        // Calculate the amount here.\n        let livePrice = await getCurrentTokenPrice(tokenSymbol);\n        let amount = Amount / livePrice;\n        amount = parseFloat(amount) \n        let ERC20tx = await requestERC20Payment(amount, tokenAddress, connectdUserAddress, Address, PaymentConfirmations )\n        paymentStatus = ERC20tx\n        return ERC20tx;\n    }\n    return paymentStatus;\n}\n\n/**\n   * Function for Native token transfers.\n   * @returns {Bool} Payment Update\n*/\nconst nativeTokenPayment = async (_amount, _address,_tokenSymbol, _paymentConfirmations) => {\n    const signer = await getSigner();\n    let amount = _amount;\n    let liveTokenPrice = await getCurrentTokenPrice(_tokenSymbol)// Live token price\n    let decimal = 18\n    let tokenAmount = amount / liveTokenPrice\n    tokenAmount = BigNumber(parseInt(tokenAmount * 10 ** decimal))\n    tokenAmount = tokenAmount.toFixed()\n    try {\n      // Transfer of funds to address\n      const tx = await signer.sendTransaction({\n        to: _address, // Funds will be received by the address\n        value: tokenAmount,\n        // gasLimit: '0x5028',\n        // maxPriorityFeePerGas: '0x3b9aca00',\n        // maxFeePerGas: '0x2540be400',\n      });\n      await tx.wait();\n      let paymentUpdate = await checkBlockConformationsNative(tx.hash, tokenAmount, _paymentConfirmations, _tokenSymbol);\n      return paymentUpdate;\n    } catch (error) {\n      toast.error('Something went wrong.', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n      console.log(error);\n      return false;\n    }\n};\n\n/**\n   * Function ckecks the block conformation of the payment on the blockchain for ERC20 token only.\n   * The user will wait until the the transaction is confirmed until specified blocks.\n   * @param {String} tx // Transaction hash after the payment.\n   * @param {INT} _amount\n   * @param {INT} _noOfBlockConformation\n   * @param {String} _tokenSymbol\n   * @returns {Bool} returns the paymetn update.\n*/\nconst checkBlockConformationsNative = async (tx, _amount, _noOfBlockConformation, _tokenSymbol) => {\n    let provider = await getProvider();\n    const confirmationsRequired = _noOfBlockConformation;\n    const receipt = await provider.waitForTransaction(\n      tx,\n      confirmationsRequired\n    );\n    if (receipt.status === 1) {\n      let actualTokenTransfer = await checkTokenTransfersNative(tx);// It retunes the actual tokens received at the blockchain.\n      \n      if (actualTokenTransfer !== 0) {\n        if (actualTokenTransfer >= _amount) {\n        //   setPaymentStatus(true);\n        //   setIsPaymentCompleted(true);\n          toast.success('Payment done successfully:)', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n          return true;\n        } else {\n          // alert(\"Something went wrong\");\n          toast.error('Something went wrong', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n          return false;\n        }\n      } else {\n        toast.error('Unable to process payment\\n Please try again ', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n        return false;\n      }\n    } else {\n      toast.error('Transaction failed to be processed', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n      return false;\n    }\n};\n\n  /**\n   * Verifies the amount to token actually transfereed. Native tokens\n   * @param {String} tx\n   * @returns {String} String '0' or 'Amount_Of_Tokens'\n   */\nconst checkTokenTransfersNative = async (tx) => {\n    let provider = await getProvider();\n    try {\n      // Get the transaction details\n      const transaction = await provider.getTransaction(tx);\n      if (transaction && transaction.confirmations > 0) {\n        let amountInWei = transaction.value;\n        amountInWei = BigNumber(amountInWei.toString())\n        return amountInWei.toFixed();\n      } else {\n        // console.log(\"Transaction not found or not confirmed yet.\");\n        toast.error('Transaction not found', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n        return \"0\";\n      }\n    } catch (error) {\n        console.log(\"Err\", error);\n        toast.error('Unable to get transaction details', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n        return \"0\";\n    }\n};\n\n/**\n   * If user is selected with non-native token, function request the payment.\n   * \n   */\nconst requestERC20Payment = async (_amount, _tokenAddress, _userAddress, _toAddress, _paymentConfirmations) => {\n    // setIsLoading(true);\n    const signer = await getSigner();\n    try {\n      /**\n       * The ERC20 payment requires 2 transactions\n       * 1. Approval of token\n       * 2. Transafer of token\n       */\n      const contractInstance = new ethers.Contract(\n        _tokenAddress,\n        ERC20_ABI,\n        signer\n      );\n        let decimals = await contractInstance.decimals();\n        decimals = decimals.toString();\n        let amount = _amount\n        amount = BigNumber(parseInt(amount * 10 ** decimals)) \n        amount = amount.toFixed();\n\n      const getApprove = await contractInstance.approve(\n        _userAddress,\n        amount\n      );\n      await getApprove.wait();\n      toast.success('Token approved', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n      let tx = await contractInstance.transferFrom(\n        _userAddress,\n        _toAddress,\n        amount,\n        { gasLimit: 100000 }\n        );\n        await tx.wait();\n        \n        let tx2 = await checkBlockConformations(tx.hash, amount, _paymentConfirmations, _tokenAddress );\n        return tx2\n    } catch (error) {\n        toast.error('Something went wrong.', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n        console.log(error);\n    }\n};\n\n/**\n   * Function ckecks the block conformation of the payment on the blockchain for ERC20 token only.\n   * The user will wait until the the transaction is confirmed until specified blocks.\n   * @param {String} tx // Transaction hash after the payment.\n   * @param {INT} _amount\n   * @param {INT} _noOfBlockConformation\n   * @param {String} _tokenAddress\n   * @returns {Bool} returns the paymetn update.\n   */\nconst checkBlockConformations = async (tx, _amount, _noOfBlockConformation, _tokenAddress) => {\n    let provider = await getProvider();\n    const confirmationsRequired = _noOfBlockConformation;\n    const receipt = await provider.waitForTransaction(\n      tx,\n      confirmationsRequired\n    );\n    // Checks the status of the transaction\n    if (receipt.status === 1) {\n      let actualTokenTransfer = await checkTokenTransfers(tx, _tokenAddress);\n\n      if (actualTokenTransfer !== \"0\") {\n        if (_amount >= actualTokenTransfer) {\n        //   setPaymentStatus(true);\n          toast.success('Payment done successfully.', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n        //   console.log(\"Payment done successfully\")\n          return true;\n        } else {\n          toast.error('Something went wrong.', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n          console.log(\"Not sufficient amount transferred: \");\n          return false;\n        }\n      } else {\n        toast.error('Unable to process payment\\n Please try again', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n        return false;\n      }\n    } else {\n      toast.error('Transaction failed to be processed', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n      return false;\n    }\n};\n\n/**\n   * Verifies the amount to token actually transfereed. ERC20 tokens\n   * @param {String} transactionHash\n   * @param {String} _tokenAddress\n   * @returns {String} String '0' or 'Amount_Of_Tokens'\n   */\nconst checkTokenTransfers = async (transactionHash, _tokenAddress) => {\n    let provider = await getProvider();\n    try {\n      const transactionReceipt = await provider.getTransactionReceipt(\n        transactionHash\n      );\n      if (transactionReceipt && transactionReceipt.status === 1) {\n        const tokenContract = new ethers.Contract(\n          _tokenAddress,\n          ERC20_ABI,\n          provider\n        );\n        const filter = tokenContract.filters.Transfer(null, null, null);\n        const events = await tokenContract.queryFilter(\n          filter,\n          transactionReceipt.blockNumber,\n          transactionReceipt.blockNumber\n        );\n        const event = events.find(\n          (event) => event.transactionHash === transactionHash\n        );\n\n        if (event) {\n          const amount = event.args.value.toString();\n          return amount;\n        } else {\n          toast.error('No token transfer event found for the tx.', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n          return \"0\";\n        }\n      } else {\n        toast.error('Transaction not found or not successful.', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n        return \"0\";\n      }\n    } catch (error) {\n      console.error(\"Error reading transaction details:\", error);\n      toast.error('No transaction found!', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n      return \"0\";\n    }\n};\n","import { ethers } from \"ethers\";\n\n/**\n * Connects dApp to Metamask wallet.\n * @returns {{String, String}} // Connected wallet address and ChainId\n */\nexport async function connectWalletFn () {\n\n    let account;\n    let currentChainId;\n    if(!window.ethereum){\n        alert(\"Please install MetaMask!\")\n    }\n    await window.ethereum.request({ method:\"eth_requestAccounts\"})\n        .then( (accounts) => {\n        account = (accounts[0]);\n    }).catch( (e) => {\n        alert(e)\n    })\n    const chainId = await window.ethereum.request({ method: 'eth_chainId' });\n    return {account, chainId}\n}\n\n/**\n * Function to switch the metamask network to desired network\n * @param {String} networkId // Hex string  \n */\nexport async function switchNetwork(networkId) {\n\n    try {\n        await window.ethereum.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{ chainId: networkId }],\n        });\n      } \n      catch (switchError) {\n        alert(\"Unable to switch network!\")\n        if (switchError.code === 4902) {\n        }\n    }\n}\n\n/**\n * Returns the provider from metamask.\n * @returns promise provider\n */\nexport async function getProvider(){\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\n    return provider;\n}\n/**\n * Returns the signer from metamask to sign the transaction.\n * @returns {Object} promise signer\n */\nexport async function getSigner(){\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\n    const signer = provider.getSigner();\n    return signer;\n\n}\n    \n  \n","import axios from 'axios'\nimport {toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n\n/**\n* Reterivies the current price in USD from Coingecko\n* @param {String} // string e.g. \"Ethereum\"\n* @return {Number} value in USD\n*/\nexport const getCurrentTokenPrice = async (_token) => {\n    let token = _token.toLowerCase();\n    try {\n        let url = `https://api.coingecko.com/api/v3/simple/price?ids=${token}&vs_currencies=usd`;\n        let fetchUrl = await axios.get(url);\n        let currentUsdPrice = fetchUrl.data[token]['usd'];\n        return currentUsdPrice;\n        \n    } catch (error) {\n        toast.error('Unable to fetch live price!', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n        console.log(error.message);\n    }\n}\n","/*\n\n    ✅ Connect Wallet\n    ✅ Get Wallet address\n    ✅ Token transfer\n    ✅ Confirmation check\n    ✅ Returns payment status.\n    ✅ Testing ERC20 token\n*/\n\n// Unifarm: ArgentX wallet, It has stark token.\n// BlockWhizz Bravoos Wallet\n\nimport { connectWallet } from \"./StarknetHelper\";\nimport { Contract, cairo ,CallData,  } from \"starknet\";\nimport BigNumber from \"bignumber.js\";\nimport {toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { STARKNET_ERC20_ABI, TokenAddress, Tokens } from \"../Constant/Constant\";\nimport { getCurrentTokenPrice } from \"../Constant/LivePrice\";\n\n/**\n * * Main Function to handle Starknet transaction.\n * @param {String} Token // Token name\n * @param {String} Address_  // Wallet address to send funds.\n * @param {INT} Amount // Amount in USD\n * @param {INT} PaymentConfirmation // Wait for No. of blocks confirmations. Default 2\n * @returns \n */\nexport async function makeStarknetPayment(Token, Address_, Amount, PaymentConfirmation=2 ) {\n\n    let Address = Address_.STARKNET;\n    if(Address.length === 66) { // Replaces 0x0.. to 0x..\n      Address = Address.slice(3);\n      Address = \"0x\"+ Address\n    }\n    let connectVar = await connectWallet();\n    const walletId = connectVar?.id\n    const userAddress = connectVar?.account?.address;\n    const provider = connectVar.provider\n    const signer = connectVar.account.signer\n    let tokenAddress = TokenAddress[\"Starknet\"][Token];\n    let tokenDetails = Tokens[Token];\n\n    if (tokenDetails.type === \"unstable\"){\n      let liveTokenPrice = await getCurrentTokenPrice(tokenDetails.dname);\n      let amount = Amount / liveTokenPrice\n      let tx = await requestERC20Payment(amount, tokenAddress, Address, userAddress, provider, signer, PaymentConfirmation, connectVar)\n      return tx;\n      \n    }\n    else {\n      let tx = await requestERC20Payment(Amount, tokenAddress, Address, userAddress, provider, signer, PaymentConfirmation, connectVar)\n      return tx;\n    }\n}\n\n/**\n * \n * @param {INT} _tokenAmount // Amount of token.\n * @param {String} _tokenAddress // Token address\n * @param {String} _toAddress // Wallet address to transfer funds.\n * @param {String} _fromAddress // Connected wallet address.\n * @param {Object} _provider // Provider object from wallet.\n * @param {Object} _signer // Signer object from wallet.\n * @param {INT} _blockConfirmations // Wait for No. of blocks confirmations. Default 2.\n * @param {Object} _starknetObj // Starknet Object from wallet extension.\n * @returns \n */\nconst requestERC20Payment = async(_tokenAmount, _tokenAddress, _toAddress, _fromAddress, _provider, _signer,_blockConfirmations, _starknetObj) => {\n  \n  let provider = _provider;\n  const contractInstance = new Contract(STARKNET_ERC20_ABI, _tokenAddress, provider)\n  let decimal = await contractInstance.decimals()\n  decimal = decimal.decimals.toString();\n  \n  let tokenAmount = BigNumber(parseInt(_tokenAmount * 10 ** decimal))\n  \n  try {\n\n    let transferToken = await _starknetObj.account.execute({\n      contractAddress: _tokenAddress, // ERC20 token addrss\n      entrypoint: 'transfer',\n      calldata: CallData.compile({\n        recipient: _toAddress, // Receiver's address\n        amount: cairo.uint256(parseInt(tokenAmount))\n      })\n    })\n    \n    let status = await provider.waitForTransaction(transferToken.transaction_hash);\n    let finalStatus = status.finality_status;\n    if(finalStatus === \"ACCEPTED_ON_L2\") {\n      let Receipt =  await provider.getTransactionReceipt(transferToken.transaction_hash)\n      let update = await verifyTransaction(transferToken.transaction_hash, tokenAmount, provider, _toAddress, _fromAddress, _tokenAddress, decimal);\n      if (update){\n        toast.success('Token transferred successfully', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n        return true;\n      }\n      else {\n        toast.error('Unable to make payment! \\n No payment found on L2', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n        return false;\n      }\n    }\n    else {\n      toast.error('Unable to make payment! \\n Error while accepting transfer at L2', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n      return false;\n    }\n    \n  } catch (error) {\n    console.log(\"error: \" + error)\n    toast.error('Unable to make payment!', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n    return false;\n  }\n}\n\n\n/**\n * \n * @param {String} _txHash // Transaction hash after transaction.\n * @param {String} _latestAmount // Amount of funds transferred.\n * @param {Object} _provider // Provider object from wallet.\n * @param {String} _toAddress // Wallet address to transfer funds.\n * @param {String} _fromAddress // Connected wallet address.\n * @param {String} _tokenAddress // Token address\n * @param {INT} _decimal // Token decimals.\n * @returns \n */\nconst verifyTransaction = async(_txHash, _latestAmount,_provider, _toAddress, _fromAddress, _tokenAddress, _decimal) => {\n\n  let verificationStatue = false;\n  const provider = _provider;\n  let Receipt =  await provider.getTransactionReceipt(_txHash)\n  let tx = Receipt.events; \n\n  let tokenAddressOfTransferToken = tx[0].from_address; // ERC20_Token Address\n  let tokenTransferedFromAddress = tx[0].data[0] // userAddress\n  let tokenTransferedToAddress = tx[0].data[1] // It should be our address.\n  let tokenTransferedAmount = tx[0].data[2] // Amount\n  tokenTransferedAmount = parseInt(tokenTransferedAmount.toString(16))\n  tokenTransferedAmount = tokenTransferedAmount * _decimal\n  let _amount = parseInt(_latestAmount.toString())\n  if(tokenTransferedAmount >= _amount && \n    tokenTransferedToAddress.toLowerCase() === _toAddress.toLowerCase() && \n    tokenTransferedFromAddress.toLowerCase() === _fromAddress.toLowerCase() && \n    tokenAddressOfTransferToken.toLowerCase() === (_tokenAddress).toLowerCase()){\n      verificationStatue = true\n  }     \n  return verificationStatue\n}\n","import { connect, disconnect } from \"get-starknet\"\nimport {toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n/**\n * Function to connect extension wallet ArgentX OR Braavos\n * @returns {Object} // Wallet object.\n */\nexport async function connectWallet() {\n    try {\n        let connectVar = await connect();\n        return connectVar;\n    } catch (error) {\n        console.log(error)\n        toast.error('Unable to connect wallet.', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});   \n    }\n}","// rpc: https://nibiru.rpc.kjnodes.com\n\nexport async function makeNibiruPayment(Token, Address, Amount, PaymentConfirmation=2) {\n\n    console.log(\"Here we are\")\n    let account;\n    let currentChainId;\n\n    if(!window.leap){\n        alert(\"Please install Leap wallet!\")\n    }\n    // const con = await window.getKey('cataclysm-1')\n    const con = await window.leap.getKey('cataclysm-1')\n    // const con = await window.leap.getKey('nibiru-testnet-1')\n    console.log(\"con\", con);\n    \n    console.log(\"window\", window.leap);\n    \n}","/*\n\n    ✅ Connect Wallet\n    ✅ Get Wallet address\n     Token transfer\n     Block Confirmation check\n     Returns payment status.\n     Testing ERC20 token\n*/\n\n\nexport async function makeSolanaPayment() {\n    \n}"],"names":[],"version":3,"file":"main.js.map"}