{"mappings":"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","sources":["src/index.js","src/Components/EVMConnect.js","src/Constants/Constants.js","node_modules/@parcel/runtime-js/lib/runtime-19557d09d4e20e29.js","src/Components/EVMFunctions/ConnectMeta.js","src/Components/StarkNetConnect.js","src/Components/StarknetFunctions/ConnectWallet.js","src/Constants/StarknetConstant.js"],"sourcesContent":["export {default as EVMConnect } from './Components/EVMConnect'\nexport {default as StarkNetConnect } from './Components/StarkNetConnect'\nexport {Chains, Tokens} from './Constants/Constants'\nexport {StarkTokens} from './Constants/StarknetConstant'\n","import axios from \"axios\";\nimport React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { ERC20_ABI, TokenAddress } from \"../Constants/Constants\";\nimport resmiclogo from \"../assets/resmiclogo.png\";\nimport {ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport {\n  connectWallet,\n  getProvider,\n  getSigner,\n  switchNetwork,\n} from \"./EVMFunctions/ConnectMeta\";\nimport \"../CSS/PaymentPopUp.css\";\nimport \"../CSS/Loader.css\";\nimport \"../CSS/EVMComponent.css\";\n\n/**\n * Component function receives input from the user and make the transaction\n * @param {String} Address // Address where funds will be get transferred\n * @param {Array} Tokens  // Array of tokens user want to accept\n * @param {Array} Chain  // Array of blockchain user want to accept\n * @param {INT} Amount  // Amount to accept in USD\n * @param {Style} CSS  // Customise CSS for buttons.\n * @param {bool} setPaymentStatus // Returns the payment completion status of the tx.  // Customise CSS for buttons.\n * @param {INT} noOfBlockConformation // No. of Block Conformation to verify the transaction\n * @returns React componen\n */\nfunction EVMConnect({\n  Address,\n  Tokens,\n  Chains,\n  Amount,\n  Style = {displayName: \"Make Payment\", \n    backgroundColor: \"#007bff\",\n    color: \"#fff\",\n    border: \"none\",\n    padding: \"10px 20px\",\n    borderRadius: \"4px\",\n    fontSize: \"18px\",\n    cursor: \"pointer\"},\n  setPaymentStatus,\n  noOfBlockConformation = 3,\n}) {\n  const [selectedToken, setSelectedToken] = useState(null);\n  const [selectedChain, setSelectedChain] = useState(null);\n  const [userAddress, setUserAddress] = useState();\n  const [isPaymentCompleted, setIsPaymentCompleted] = useState(false);\n  const [currentTokenPrice, setCurrentTokenPrice] = useState(\"\"); // To display the conversion rate for token.\n  const [isConnected, setIsConnected] = useState(false);\n  const [btnName, setBtnName] = useState(\"Connect Wallet\");\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [calculatedAmount, setCalculatedAmount] = useState(0)\n\n  // Select Blockchain dropdown selection menu.\n  let selectChain = Chains.map((chain) => {\n    return (\n      <>\n        <option value=\"\" disabled selected hidden>\n          Select Blockchain\n        </option>\n        <option key={chain?.name} value={chain?.name}>\n          {\" \"}\n          <img src={resmiclogo} alt=\"\" />\n          {chain?.name}{\" \"}\n        </option>\n      </>\n    );\n  });\n  // Select Token dropdown selection menu.\n  let selectToken = Tokens.map((token) => {\n    return (\n      <>\n        <option value=\"\" disabled selected hidden>\n          Select Token\n        </option>\n        <option key={token?.dname} value={token?.dname}>\n          {\" \"}\n          {token?.dname}\n        </option>\n      </>\n    );\n  });\n\n  /**\n   * Reterivies the current price in USD from Coingecko\n   * @param {String} // string e.g. \"Ethereum\"\n   * @return {Number} value in USD\n   */\n  const getCurrentTokenPrice = async (_token) => {\n    let token = _token.toLowerCase();\n    try {\n      let url = `https://api.coingecko.com/api/v3/simple/price?ids=${token}&vs_currencies=usd`;\n      let fetchUrl = await axios.get(url);\n      let currentUsdPrice = fetchUrl.data[token][\"usd\"];\n      return currentUsdPrice;\n    } catch (error) {\n      // alert(\"Error while getting token price\");\n      toast.error('Unable to fetch live price!', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n      console.log(error.message);\n    }\n  };\n\n  /**\n   * Connects user to Wallet {Metamask wallet}\n   * Changes the Blockchain if required.\n   */\n  const connectWalletFunc = async () => {\n    setBtnName(\"Connecting\");\n    setIsLoading(true);\n    let connectFunc = await connectWallet(); // Calling connect function from Constant/ConnectMeta\n    setUserAddress(connectFunc.account); // Returns the connected wallet address.\n    setBtnName(\"Make Payment\");\n    setIsLoading(false);\n\n    // if(connectFunc.chainId != getChainData[selectedChain]){ // connectFunc.chainId -> Returns the current connected chain\n    if (connectFunc.chainId !== selectedChain.id) {\n      // connectFunc.chainId -> Returns the current connected chain\n      setBtnName(\"Switching network\");\n      setIsLoading(true);\n      await switchNetwork(selectedChain.id);\n      setIsConnected(true);\n      setIsLoading(false);\n      setBtnName(\"Make Payment\");\n      return true;\n    } else {\n      setIsConnected(true);\n      return true;\n    }\n  };\n\n  /**\n   * If user is selected with non-native token, function request the payment.\n   * @param {INT} _amount\n   * @param {String} _tokenAddress\n   */\n  const requestERC20Payment = async (_amount, _tokenAddress) => {\n    setIsLoading(true);\n    const signer = await getSigner();\n\n    try {\n      /**\n       * The ERC20 payment requires 2 transactions\n       * 1. Approval of token\n       * 2. Transafer of token\n       */\n      const contractInstance = new ethers.Contract(\n        _tokenAddress,\n        ERC20_ABI,\n        signer\n      );\n      let decimals = await contractInstance.decimals();\n      decimals = decimals.toString();\n\n      const getApprove = await contractInstance.approve(\n        userAddress,\n        (_amount * 10 ** decimals).toString()\n      );\n      await getApprove.wait();\n      // alert(\"Token approved successfully:)\"); \n      toast.success('Token approved', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n      let tx = await contractInstance.transferFrom(\n        userAddress,\n        Address,\n        (_amount * 10 ** decimals).toString(),\n        { gasLimit: 100000 }\n        );\n        await tx.wait();        \n        await checkBlockConformations(tx.hash, decimals);\n      } catch (error) {\n        toast.error('Something went wrong.', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n        console.log(error);\n    }\n  };\n\n  /**\n   * Function for native token transfers.\n   * @param {INT/FLOAT} _amount // Amount in native token ().\n   *\n   */\n  const nativeTokenPayment = async (_amount) => {\n    setIsLoading(true);\n    const signer = await getSigner();\n    let amount = _amount;\n    let slicedNum = amount.toFixed(10); // Rounding it to 10 digits.\n    let amountInWei = ethers.utils.parseEther(slicedNum.toString()); // Converting the amount to WEI {Smallest amount of ETH (1 ETH = 10 ** 18)}\n\n    try {\n      // Transfer of funds to address\n      const tx = await signer.sendTransaction({\n        to: Address, // Funds will be received by the address\n        value: amountInWei,\n        // gasLimit: '0x5028',\n        // maxPriorityFeePerGas: '0x3b9aca00',\n        // maxFeePerGas: '0x2540be400',\n      });\n      await tx.wait();\n      await checkBlockConformationsNative(tx.hash, _amount);\n    } catch (error) {\n      toast.error('Something went wrong.', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n      console.log(error);\n    }\n  };\n\n  /**\n   * Function ckecks the block conformation of the payment on the blockchain for ERC20 token only.\n   * The user will wait until the the transaction is confirmed until specified blocks.\n   * @param {String} tx // Transaction hash after the payment.\n   * @param {INT} decimals\n   * @returns {Bool} returns the paymetn update.\n   */\n  const checkBlockConformations = async (tx, decimals, _amount) => {\n    let provider = await getProvider();\n    const confirmationsRequired = noOfBlockConformation;\n    const receipt = await provider.waitForTransaction(\n      tx,\n      confirmationsRequired\n    );\n    // Checks the status of the transaction\n    if (receipt.status === 1) {\n      let actualTokenTransfer = await checkTokenTransfers(tx);\n\n      if (actualTokenTransfer !== \"0\") {\n        let _amount = parseFloat(actualTokenTransfer);\n        // Slippage of 0.1% for the trade.\n        let slippage = (0.1 * Amount) / 100;\n        let minimumAmount = Amount - slippage;\n        \n        // if (_amount / (10 ** decimals).toString() >= Amount) {\n        if (_amount / (10 ** decimals).toString() >= minimumAmount) {\n          \n          setIsPaymentCompleted(true);\n          setPaymentStatus(true);\n          toast.success('Payment done successfully.', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n          setIsLoading(false);\n          setIsPopupOpen(false);\n          return true;\n        } else {\n          toast.error('Something went wrong.', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n          console.log(\"Not sufficient amount transferred: \");\n          return false;\n        }\n      } else {\n       \n        toast.error('Unable to process payment\\n Please try again', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n        return false;\n      }\n    } else {\n      toast.error('Transaction failed to be processed', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n      return false;\n    }\n  };\n\n  /**\n   * Verifies the amount to token actually transfereed. ERC20 tokens\n   * @param {String} transactionHash\n   * @returns {String} String '0' or 'Amount_Of_Tokens'\n   */\n  const checkTokenTransfers = async (transactionHash) => {\n    let provider = await getProvider();\n    try {\n      const transactionReceipt = await provider.getTransactionReceipt(\n        transactionHash\n      );\n      if (transactionReceipt && transactionReceipt.status === 1) {\n        const tokenContract = new ethers.Contract(\n          TokenAddress[selectedChain?.name][selectedToken?.dname],\n          ERC20_ABI,\n          provider\n        );\n        const filter = tokenContract.filters.Transfer(null, null, null);\n        const events = await tokenContract.queryFilter(\n          filter,\n          transactionReceipt.blockNumber,\n          transactionReceipt.blockNumber\n        );\n        const event = events.find(\n          (event) => event.transactionHash === transactionHash\n        );\n\n        if (event) {\n          const amount = event.args.value.toString();\n          return amount;\n        } else {\n          toast.error('No token transfer event found for the tx.', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n          return \"0\";\n        }\n      } else {\n        toast.error('Transaction not found or not successful.', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n        return \"0\";\n      }\n    } catch (error) {\n      console.error(\"Error reading transaction details:\", error);\n      toast.error('No transaction found!', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n      return \"0\";\n    }\n  };\n\n  /**\n   * Function ckecks the block conformation of the payment on the blockchain for Native token only.\n   * The user will wait until the the transaction is confirmed until specified blocks.\n   * @param {String} tx\n   * @returns {Bool}\n   */\n  const checkBlockConformationsNative = async (tx, _amount) => {\n    let provider = await getProvider();\n    const confirmationsRequired = noOfBlockConformation;\n    const receipt = await provider.waitForTransaction(\n      tx,\n      confirmationsRequired\n    );\n\n    if (receipt.status === 1) {\n      let actualTokenTransfer = await checkTokenTransfersNative(tx);\n      actualTokenTransfer = parseFloat(actualTokenTransfer);\n\n      let currentTokenPrice2 = await getCurrentTokenPrice(selectedToken?.name);\n      currentTokenPrice2 = Amount / currentTokenPrice2;\n      // Slippage of 0.8% for the trade.\n      let slippage = (0.1 * _amount) / 100;\n      let minimumAmount = _amount - slippage;\n      \n      if (actualTokenTransfer !== 0) {\n        // if (actualTokenTransfer >= currentTokenPrice2) { // v@1.0.7 Slippage added.\n        if (actualTokenTransfer >= minimumAmount) {\n          setPaymentStatus(true);\n          setIsPaymentCompleted(true);\n          toast.success('Payment done successfully:)', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n          setIsLoading(false);\n          setIsPopupOpen(false)\n          return true;\n        } else {\n          toast.error('Something went wrong', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n          return false;\n        }\n      } else {\n        toast.error('Unable to process payment\\n Please try again ', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n        return false;\n      }\n    } else {\n      toast.error('Transaction failed to be processed', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n      return false;\n    }\n  };\n\n  /**\n   * Verifies the amount to token actually transfereed. Native tokens\n   * @param {String} transactionHash\n   * @returns {String} String '0' or 'Amount_Of_Tokens'\n   */\n  const checkTokenTransfersNative = async (tx) => {\n    let provider = await getProvider();\n\n    try {\n      // Get the transaction details\n      const transaction = await provider.getTransaction(tx);\n\n      if (transaction && transaction.confirmations > 0) {\n        const amountInWei = transaction.value;\n        const amountInEther = ethers.utils.formatEther(amountInWei);\n        return amountInEther.toString();\n      } else {\n        toast.error('Transaction not found', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n        return \"0\";\n      }\n    } catch (error) {\n      toast.error('Unable to get transaction details', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n      return \"0\";\n    }\n  };\n\n  /**\n   *  Final function to combine all the above functions to complete the transaction\n   * 1. Connet wallet\n   * 2. Switch network if required\n   * 3. make payment\n   */\n  const makePayment = async () => {\n    if (selectedToken?.dname == null || selectedChain?.name == null) {\n      toast.warning('Please select the payment mode', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n    } else {\n      await connectWalletFunc();\n      setBtnName(\"Make payment\");\n      if (isConnected) {\n        // Stable Coins.\n        if (selectedToken.type === \"stable\") {\n          setCalculatedAmount(Amount)\n          requestERC20Payment(\n            Amount,\n            TokenAddress[selectedChain?.name][selectedToken?.dname]\n          );\n        }\n        // Native Tokens\n        else if (selectedChain?.id === selectedToken?.id) {\n          let latestPrice = await getCurrentTokenPrice(selectedToken?.name); // Returns Float/Int of the current market price of the token. //@note using .name only for the MATIC to fetch the live price.\n          let latestAmount = Amount / latestPrice;\n          setCalculatedAmount(latestAmount)\n          nativeTokenPayment(latestAmount);\n        }\n        // ERC20 Tokens\n        else {\n          let latestPrice = await getCurrentTokenPrice(selectedToken?.name);\n          let latestAmount = Amount / latestPrice;\n          setCalculatedAmount(latestAmount)\n          requestERC20Payment(\n            latestAmount,\n            TokenAddress[selectedChain?.name][selectedToken?.name]\n          );\n        }\n      } else {\n        await connectWalletFunc();\n      }\n    }\n  };\n\n  /**\n   * Helper functions for pop up.\n   */\n  const handleOpenPopup = () => {\n    setIsPopupOpen(true);\n  };\n  const handleClosePopup = () => {\n    setIsPopupOpen(false);\n  };\n  const handleTokenSelect = async (e) => {\n    // const filteredArray = Tokens.filter((obj) => obj?.name === e.target.value); // Error V @1.0.7\n    const filteredArray = Tokens.filter((obj) => obj?.dname === e.target.value);\n    const token = filteredArray[0];\n    let tokenPrice = \"1\";\n    if (token?.type !== \"stable\"){\n      if (token?.name === \"MATIC\"){\n        tokenPrice = await getCurrentTokenPrice(\"matic-network\");\n      }\n      else{\n        tokenPrice = await getCurrentTokenPrice(token?.name);\n      }\n    }\n    setCurrentTokenPrice(\"1 \" + token?.dname + \" = $ \" + tokenPrice);\n    setSelectedToken(token);\n  };\n  const handleChainSelect = (e) => {\n    const filteredArray = Chains.filter((obj) => obj?.name === e.target.value);\n    setSelectedChain(filteredArray[0]);\n  };\n\n  return (\n    <>\n      <button style={Style} onClick={handleOpenPopup}>{Style?.displayName}</button>\n      <div>\n        {/* Popup */}\n        {isPopupOpen && (\n          <div className=\"popup-container\">\n            <div className=\"popup-content\">\n              <div className=\"resmic-logo\">\n                <img src={resmiclogo} alt=\"\" />\n                <span className=\"close\" onClick={handleClosePopup}>\n                  &times;\n                </span>\n              </div>\n              <div className=\"modal-contents\">\n                <div className=\"inputs\">\n                  <div className=\"popup-heading\">\n                    <span>Pay amount</span>\n\n                    <div className=\"amount\">${Amount.toFixed(2)}</div>\n                  </div>\n\n\n                  <div className=\"inputGroup\">\n                    <div className=\"inputHeading\">\n                      <span>Blockchain</span>\n                    </div>\n                    <select\n                      onChange={(e) => {\n                        handleChainSelect(e);\n                      }}\n                      name=\"Chain\"\n                      id=\"\"\n                    >\n                      {\" \"}\n                      {selectChain}{\" \"}\n                    </select>\n                  </div>\n                  <div className=\"inputGroup\">\n                    <div className=\"inputHeading\">\n                      <span>Token</span>\n                    </div>\n                    <select\n                      onChange={(e) => {\n                        handleTokenSelect(e);\n                      }}\n                      name=\"Tokens\"\n                      id=\"\"\n                    >\n                      {\" \"}\n                      {selectToken}{\" \"}\n                    </select>\n                  </div>\n                  <div className=\"live-token-price\">{currentTokenPrice}</div>\n                  <div className=\"inputGroup\">\n                    <button onClick={makePayment}>\n                      {!isLoading && btnName}\n                      {isLoading &&\n                        <div className=\"spinner\">\n                          <div className=\"bar1\"></div>\n                          <div className=\"bar2\"></div>\n                          <div className=\"bar3\"></div>\n                          <div className=\"bar4\"></div>\n                          <div className=\"bar5\"></div>\n                          <div className=\"bar6\"></div>\n                          <div className=\"bar7\"></div>\n                          <div className=\"bar8\"></div>\n                          <div className=\"bar9\"></div>\n                          <div className=\"bar10\"></div>\n                          <div className=\"bar11\"></div>\n                          <div className=\"bar12\"></div>\n                        </div>\n                      }\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      <ToastContainer/>\n    </>\n  );\n}\n\nexport default EVMConnect;\n","/**\n * Supported {Verified } ERC 20 token address\n */\nexport const TokenAddress = {\n    \n  \"Ethereum\":{\n      \"USDT\": \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n      \"USDC\": \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n      \"DAI\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n      \"BUSD\": \"0x4fabb145d64652a948d72533023f6e7a623c7c53\",\n      \"Bitcoin\": \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\",\n      \"Matic\": \"0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0\",\n      \"BNB\": \"0xB8c77482e45F1F44dE1745F52C74426C631bDD52\",\n  },\n\n  \"Polygon\":{\n      \"USDT\": \"0xc2132D05D31c914a87C6611C10748AEb04B58e8F\",\n      \"USDC\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\n      \"DAI\": \"0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063\",\n      \"BUSD\": \"0xdab529f40e671a1d4bf91361c21bf9f0c9712ab7\",\n      \"Bitcoin\": \"0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6\",\n      \"BNB\": \"0x3BA4c387f786bFEE076A58914F5Bd38d668B42c3\",\n      \"Ethereum\": \"0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619\",\n    },\n    \n  \"Binance\":{\n      \"BUSD\": \"0xe9e7cea3dedca5984780bafc599bd69add087d56\",\n      \"DAI\": \"0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3\",\n      // \"BSC-USD\": \"0x55d398326f99059fF775485246999027B3197955\",\n      \"USDT\": \"0x55d398326f99059fF775485246999027B3197955\",// BSC-USD\n      \"USDC\": \"0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d\",\n      \"DOGE\": \"0xbA2aE424d960c26247Dd6c32edC70B295c744C43\", // dogecoin \n      \"Matic\": \"0xCC42724C6683B7E57334c4E856f4c9965ED682bD\",\n      \"Ethereum\": \"0x2170Ed0880ac9A755fd29B2688956BD959F933F8\",\n      \"Bitcoin\": \"0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c\",\n  },\n\n  \"Optimism\":{\n      \"USDT\": \"0x94b008aA00579c1307B0EF2c499aD98a8ce58e58\",\n      \"USDC\": \"0x7F5c764cBc14f9669B88837ca1490cCa17c31607\",\n      \"Bitcoin\": \"0x68f180fcCe6836688e9084f035309E29Bf0A2095\",\n      \"DAI\": \"0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1\",\n      \"Optimism\": \"0x4200000000000000000000000000000000000042\",\n\n  },\n\n  \"Goerli\":{\n      \"USDC\":\"0x65aFADD39029741B3b8f0756952C74678c9cEC93\",\n      \"DAI\":\"0x75Ab5AB1Eef154C0352Fc31D2428Cef80C7F8B33\",        \n  }\n}\n/**\n* Newly supported blockchains will be added here.\n*/\nexport const Chains = {\nEthereum: {\"name\":'Ethereum','id':'0x1'},\nPolygon: {\"name\":'Polygon','id':'0x89', \"img\": \"https://assets-global.website-files.com/637359c81e22b715cec245ad/63dc31f8817a4a509d7635a7_Logo.svg\"},\nBinance: {\"name\":'Binance','id':'0x38'},\nOptimism: {\"name\":'Optimism','id':'0xa'},\nGoerli: {\"name\":'Goerli','id':'0x5'},\n}\n\n/**\n* Newly supported tokens will be added here.\n*/\nexport const Tokens ={\n  USDT:{\"dname\":\"USDT\",\"name\":'USDT','type':'stable', 'id':'-1',\"img\":\"url\"},\n  USDC:{\"dname\":\"USDC\",\"name\":'USDC','type':'stable', 'id':'-1'},\n  DAI:{\"dname\":\"DAI\",\"name\":'DAI','type':'stable', 'id':'-1'},\n  BUSD:{\"dname\":\"BUSD\",\"name\":'BUSD','type':'stable', 'id':'-1'},\n  ETH:{\"dname\":\"Ethereum\",\"name\":'Ethereum','type':'unstable', 'id':'0x1'}, // ID is important for identify is the token is native or not & for switching chain.\n  MATIC:{\"dname\":\"MATIC\", \"name\":\"matic-network\",'type':'unstable', 'id':'0x89', \"img\": \"https://assets-global.website-files.com/637359c81e22b715cec245ad/63dc31f8817a4a509d7635a7_Logo.svg\"},\n  // BNB:{\"dname\":\"BNB\",\"name\":'BNB','type':'unstable', 'id':'0x38'},\n  BNB:{\"dname\":\"BNB\",\"name\":'binancecoin','type':'unstable', 'id':'0x38'},\n  Bitcoin:{\"dname\":\"Bitcoin\",\"name\":'Bitcoin','type':'unstable', 'id':'-1', \"img\":\"https://bitcoin.org/img/icons/logotop.svg?1693519667\" },\n  DOGE:{\"dname\":\"Dogecoin\",\"name\":'dogecoin','type':'unstable', 'id':'-1'},\n  OPTIMISM:{\"dname\":\"Optimism\",\"name\":'Optimism','type':'unstable', 'id':'-1'},\n  BSCUSD:{\"dname\":\"BSCUSD\",\"name\":'BSCUSD','type':'stable', 'id':'-1'}, // Binance-USDC\n  GETH:{\"dname\":\"Ethereum\",\"name\":'Ethereum','type':'unstable', 'id':'0x5'},\n}\n\n/**\n* ERC20 Smart Contract ABI\n*/\nexport const ERC20_ABI  = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [{ name: \"\", type: \"string\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: \"_spender\", type: \"address\" },\n      { name: \"_value\", type: \"uint256\" },\n    ],\n    name: \"approve\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: \"_from\", type: \"address\" },\n      { name: \"_to\", type: \"address\" },\n      { name: \"_value\", type: \"uint256\" },\n    ],\n    name: \"transferFrom\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      { name: \"\", type: \"address\" },\n      { name: \"\", type: \"address\" },\n    ],\n    name: \"allowed\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [{ name: \"\", type: \"string\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: \"_to\", type: \"address\" },\n      { name: \"_value\", type: \"uint256\" },\n    ],\n    name: \"transfer\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      { name: \"_owner\", type: \"address\" },\n      { name: \"_spender\", type: \"address\" },\n    ],\n    name: \"allowance\",\n    outputs: [{ name: \"remaining\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"owner\", type: \"address\" },\n      { indexed: true, name: \"spender\", type: \"address\" },\n      { indexed: false, name: \"value\", type: \"uint256\" },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"from\", type: \"address\" },\n      { indexed: true, name: \"to\", type: \"address\" },\n      { indexed: false, name: \"value\", type: \"uint256\" },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  { anonymous: false, inputs: [], name: \"Pause\", type: \"event\" },\n  { anonymous: false, inputs: [], name: \"Unpause\", type: \"event\" },\n];\n\n","module.exports = new __parcel__URL__(\"resmiclogo.4179cff7.png\").toString();","import { Signer, ethers } from \"ethers\";\n\nexport async function connectWallet () {\n\n    let account;\n    let currentChainId;\n    if(!window.ethereum){\n        alert(\"Please install MetaMask!\")\n    }\n    await window.ethereum.request({ method:\"eth_requestAccounts\"})\n        .then( (accounts) => {\n        account = (accounts[0]);\n    }).catch( (e) => {\n        alert(e)\n    })\n    const chainId = await window.ethereum.request({ method: 'eth_chainId' });\n    return {account, chainId}\n}\n/**\n * Function to switch the metamask network to desired network\n * @param {String} networkId // Hex string  \n */\nexport async function switchNetwork(networkId) {\n\n    // await window.ethereum.request({\n    //     method: 'wallet_switchEthereumChain',\n    //     params: [{ chainId: networkId }],\n    //   });\n      \n    try {\n        await window.ethereum.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{ chainId: networkId }],\n        });\n      } \n      catch (switchError) {\n        alert(\"Unable to switch network!\")\n        if (switchError.code === 4902) {\n        }\n    }\n\n}\n\n/**\n * Returns the provider from metamask.\n * @returns promise provider\n */\nexport async function getProvider(){\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\n    return provider;\n}\n/**\n * Returns the signer from metamask to sign the transaction.\n * @returns promise signer\n */\nexport async function getSigner(){\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\n    const signer = provider.getSigner();\n    return signer;\n\n}\n    \n  \n","import React, { useState } from \"react\";\nimport axios from 'axios'\nimport { Contract, Provider, cairo ,CallData, uint256 } from \"starknet\";\nimport { connectWallet } from \"./StarknetFunctions/ConnectWallet\";\nimport { STARKNET_ERC20_ABI, StarknetTokenAddress,} from \"../Constants/StarknetConstant\";\nimport {toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport '../CSS/StarknetComponent.css'\nimport resmiclogo from \"../assets/resmiclogo.png\";\n\n/**\n * \n * @param {String} Address Wallet Address that will be receiving the funds\n * @param {Array} Tokens Array of tokens to accept funds in\n * @param {Number} Amount Amount in USD\n * @param {bool} setPaymentStatus returns boolean indicating payment status\n * @param {CSS} Style CSS component for the button \n */\nfunction StarkNetConnect\n({ Address, \n    Tokens, \n    Amount , \n    setPaymentStatus,\n    Style = {displayName: \"Make Payment\", \n    backgroundColor: \"#007bff\",\n    color: \"#fff\",\n    border: \"none\",\n    padding: \"10px 20px\",\n    borderRadius: \"4px\",\n    fontSize: \"18px\",\n    cursor: \"pointer\"},\n  }) {\n\n    const [selectedToken, setSelectedToken] = useState(null);\n    const [isConnected, setIsConnected] = useState(false);\n    const [starknetObject, setStarknetObject] = useState();\n    const [userAddress, setUserAddress] = useState();\n    const [providerUrl, setProviderUrl] = useState();\n    const [isPopupOpen, setIsPopupOpen] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [currentAmount, setCurrentAmount] = useState();\n    const [currentTokenPrice, setCurrentTokenPrice] = useState(\"\"); // To display the conversion rate for token.\n    const [btnName, setBtnName] = useState(\"Make Payment\");\n\n    // Select Token dropdown selection menu.\n    let selectToken = Tokens.map((token) => {\n      return (\n        <>\n          <option value=\"\" disabled selected hidden>Select Token</option>\n          <option key={token?.name} value={token?.name}>{\" \"}{token?.name}</option>    \n        </>\n      );\n    });\n\n    /**\n     * Connect dApp to the StarkNet available Wallet.\n     */\n    const connectStarknetWallet = async () => {\n        setIsLoading(true);\n        let connect = await connectWallet();\n        setStarknetObject(connect);\n        setUserAddress(connect?.account?.address);\n        // setProviderUrl(connect?.provider?.gatewayUrl)\n        setProviderUrl(connect?.account?.provider?.baseUrl);\n        setIsConnected(true);\n        setIsLoading(false);\n        // console.log(connect?.account?.address);\n        // console.log(connect?.provider);\n    };\n\n    /**\n     * Fetches current market price of token.\n     * @param {String} _token Token name, e.b. \"Ethereum\"\n     * @returns {Number} Returns current USD value of input token.\n     */\n    const getCurrentTokenPrice = async (_token) => {\n        let token = _token.toLowerCase()\n        try {\n            let url = `https://api.coingecko.com/api/v3/simple/price?ids=${token}&vs_currencies=usd`\n            let fetchUrl = await  axios.get(url)\n            let currentUsdPrice = fetchUrl.data[token]['usd']\n            // console.log(currentUsdPrice)\n            return currentUsdPrice\n            \n        } catch (error) {\n            // alert(\"Error while getting token price\")\n            toast.error('Unable to fetch live price!', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n            console.log(error.message)\n        }\n    }\n\n    /**\n     * \n     * @param {Number} latestAmount Calculated current amount of token\n     * @param {String} _selectedToken ERC20 token address  \n     */\n    const requestERC20Payment = async(latestAmount, _selectedToken) => {\n      setIsLoading(true);  \n      // console.log(\"selectedToken\", StarknetTokenAddress[_selectedToken])\n        const provider = new Provider({ sequencer: { baseUrl: providerUrl } });\n        const contractInstance = new Contract( STARKNET_ERC20_ABI,StarknetTokenAddress[_selectedToken],provider);\n        let _contractAddress = StarknetTokenAddress[_selectedToken];\n        let decimal = await contractInstance.decimals()\n        decimal = decimal.decimals.toString();\n        let _latestAmount = latestAmount * (10 ** parseInt(decimal));\n        setCurrentAmount(_latestAmount)\n  \n        try {\n          // Two functionality in a transaction.\n          // 1. The token will be approved by the user\n          // 2. The actual payment will be completed.\n          setBtnName(\"Approving ...\")    \n            let approveTokens = await starknetObject.account.execute({\n                    contractAddress: _contractAddress, // ERC20 token addrss(ETH)\n                    entrypoint: 'approve',\n                    calldata: CallData.compile({\n                        recipient: userAddress,\n                        // amount: cairo.uint256(_latestAmount)\n                        amount: cairo.uint256(parseInt( _latestAmount.toString()))\n                    })\n                })\n            await provider.waitForTransaction(approveTokens.transaction_hash);\n            console.log(\"approveTokens\", approveTokens)\n            console.log(\"approveTokens.transaction_hash\", approveTokens.transaction_hash)\n            // alert(\"Token approved!\");\n            toast.success('Token approved', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n            setBtnName(\"Make payment\");\n            let transferToken = await starknetObject.account.execute({\n              contractAddress: _contractAddress, // ERC20 token addrss(ETH)\n              entrypoint: 'transfer',\n              calldata: CallData.compile({\n                recipient: Address, // Receiver's address\n                amount: cairo.uint256(parseInt( _latestAmount.toString()))\n              })\n            })\n            await provider.waitForTransaction(transferToken.transaction_hash);\n            await verifyTransaction(transferToken.transaction_hash, _latestAmount)\n            // alert(\"Token transferred successfully :)\");\n            toast.success('Token transferred successfully', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n            setBtnName(\"Payment Done\");\n            setPaymentStatus(true);\n            setIsLoading(false);\n            setIsPopupOpen(false);\n          \n        } catch (error) {\n          console.log(error)\n          // alert(\"Unable to make payment!\")\n          toast.error('Unable to make payment!', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n        }\n    }\n\n    /**\n     * \n     * @param {String} _txHash Transaction hash after the payment.\n     * @param {Number} _latestAmount Amount of tokens calculated at current rate.\n     * @returns \n     */\n    const verifyTransaction = async(_txHash, _latestAmount) => {\n\n      let verificationStatue = false;\n      const provider = new Provider({ sequencer: { baseUrl: providerUrl } });\n      const contractInstance = new Contract( STARKNET_ERC20_ABI,StarknetTokenAddress[selectedToken?.name],provider);\n      let Receipt =  await provider.getTransactionReceipt(_txHash)\n      let tx = Receipt.events; \n\n      let tokenAddressOfTransferToken = tx[0].from_address; // ERC20_Token Address\n      let tokenTransferedFromAddress = tx[0].data[0] // userAddress\n      let tokenTransferedToAddress = tx[0].data[1] // It should be our address.\n      let tokenTransferedAmount = tx[0].data[2] // Amount\n      tokenTransferedAmount = parseInt(tokenTransferedAmount.toString(16))\n      let _amount = parseInt(_latestAmount.toString())\n      if(tokenTransferedAmount >=   _amount && \n        tokenTransferedToAddress.toLowerCase() === Address.toLowerCase() && \n        tokenTransferedFromAddress.toLowerCase() === userAddress.toLowerCase() && \n        tokenAddressOfTransferToken.toLowerCase() === (StarknetTokenAddress[selectedToken?.name]).toLowerCase()){\n          verificationStatue = true\n      }     \n      return verificationStatue\n    }\n\n    /**\n     * Super function to call all the functions in sync.\n     */\n    const makePayment = async () => {\n      if ((selectedToken?.name == null)) {\n        // alert(\"Please select the payment mode\")\n        toast.warning('Please select the payment mode', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n      }\n      else {\n        await connectStarknetWallet();\n        setBtnName(`Pay ${selectedToken?.name}`)\n        if(isConnected){\n            if (selectedToken?.name === 'stable'){\n              setCurrentAmount(Amount)\n              requestERC20Payment(Amount, selectedToken?.name);\n            } \n            else {\n                let latestPrice = await getCurrentTokenPrice(selectedToken?.name);\n                let latestAmount = (Amount / latestPrice );\n                requestERC20Payment(latestAmount, selectedToken?.name);   \n            }\n        }\n        \n        else {\n            await connectStarknetWallet();\n        }\n\n      }\n    };\n\n    /**\n     * Helper functions.\n     */\n    const handleOpenPopup = () => {\n        setIsPopupOpen(true);\n    };\n    const handleClosePopup = () => {\n          setIsPopupOpen(false);\n          setIsLoading(!isLoading);\n    };\n    const handelSelectToken = async (e) => {\n        const filteredArray = Tokens.filter(obj => obj.name === e.target.value);\n        const token = filteredArray[0];\n        let tokenPrice='1';\n        if(token.type !=='stable')tokenPrice = await getCurrentTokenPrice(token.name);\n        setSelectedToken(token);\n        setCurrentTokenPrice(\"1 \" + token.name + \" = $ \" + tokenPrice);\n        // console.log(\"token\", token)\n    };\n\n  return (\n    <>\n      <button style={Style} onClick={handleOpenPopup}>{Style?.displayName}</button>\n      {/* <button onClick={handleOpenPopup}>Make Payment</button> */}\n      <div>\n{/* handelSelectToken */}\n        {/* Popup */}\n        {isPopupOpen && (\n          <div className=\"popup-container\">\n            <div className=\"popup-content\">\n            <div className=\"resmic-logo\">\n                <img src={resmiclogo} alt=\"\" />\n                <span className=\"close\" onClick={handleClosePopup}>\n                  &times;\n                </span>\n            </div>\n            <div className=\"modal-contents\">\n                <div className=\"inputs\">\n                  <div className=\"popup-heading\">\n                    <span>Pay amount</span>\n\n                    <div className=\"amount\">${Amount.toFixed(2)}</div>\n                  </div>\n\n                  <div className=\"inputGroup\">\n                    <div className=\"inputHeading\">\n                      <span>Token</span>\n                    </div>\n                    <select\n                      onChange={(e) => {\n                        handelSelectToken(e);\n                      }}\n                      name=\"Tokens\"\n                      id=\"\"\n                    >\n                      {\" \"}\n                      {selectToken}{\" \"}\n                    </select>\n                  </div>\n                  {/* <div className=\"live-token-price\">{currentTokenPrice}</div> */}\n                  <div className=\"live-token-price\">{currentTokenPrice}</div>\n                  <div className=\"inputGroup\">\n                    <button onClick={makePayment}>\n                      {!isLoading && btnName}\n                      {isLoading &&\n                        <div class=\"spinner\">\n                          <div class=\"bar1\"></div>\n                          <div class=\"bar2\"></div>\n                          <div class=\"bar3\"></div>\n                          <div class=\"bar4\"></div>\n                          <div class=\"bar5\"></div>\n                          <div class=\"bar6\"></div>\n                          <div class=\"bar7\"></div>\n                          <div class=\"bar8\"></div>\n                          <div class=\"bar9\"></div>\n                          <div class=\"bar10\"></div>\n                          <div class=\"bar11\"></div>\n                          <div class=\"bar12\"></div>\n                        </div>\n                      }\n                    </button>\n                  </div>\n                </div>\n              </div>\n              \n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default StarkNetConnect;\n\n","import { connect, disconnect } from \"get-starknet\"\nimport {toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nexport async function connectWallet() {\n\n    try {\n        let con = await connect();\n        return con;\n\n    } catch (error) {\n        console.log(error)\n        toast.error('Unable to connect wallet.', { position: toast.POSITION.TOP_CENTER,theme: \"dark\"});\n        \n    }\n\n}","\nexport const StarknetTokenAddress = {\n    \"Ethereum\": \"0x49d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\" , \n    \"DAI\"  : \"0x0dA114221cb83fa859DBdb4C44bEeaa0BB37C7537ad5ae66Fe5e0efD20E6eB3\", \n    \"USD\" : \"0x053C91253BC9682c04929cA02ED00b3E423f6710D2ee7e0D5EBB06F3eCF368A8\", \n    \"USDT\" : \"0x68F5c6a61780768455de69077E07e89787839bf8166dEcfBf92B645209c0fB8\", \n    \"WBTC\" : \"0x3Fe2b97C1Fd336E750087D68B9b867997Fd64a2661fF3ca5A7C771641e8e7AC\",\n}\n\nexport const StarkTokens ={\n    USDT:{\"name\":'USDT','type':'stable', 'id':'-1',\"img\":\"url\"},\n    USDC:{\"name\":'USDC','type':'stable', 'id':'-1'},\n    ETH:{\"name\":'Ethereum','type':'unstable', 'id':'0x1'}, // ID is important for identify is the token is native or not & for switching chain.\n    GETH:{\"name\":'Ethereum','type':'unstable', 'id':'0x5'},\n    Bitcoin:{\"name\":'Bitcoin','type':'unstable', 'id':'-1', \"img\":\"https://bitcoin.org/img/icons/logotop.svg?1693519667\" },\n}\n\nexport const STARKNET_ERC20_ABI = [\n        {\n            \"members\": [\n                {\n                    \"name\": \"low\",\n                    \"offset\": 0,\n                    \"type\": \"felt\"\n                },\n                {\n                    \"name\": \"high\",\n                    \"offset\": 1,\n                    \"type\": \"felt\"\n                }\n            ],\n            \"name\": \"Uint256\",\n            \"size\": 2,\n            \"type\": \"struct\"\n        },\n        {\n            \"data\": [\n                {\n                    \"name\": \"from_\",\n                    \"type\": \"felt\"\n                },\n                {\n                    \"name\": \"to\",\n                    \"type\": \"felt\"\n                },\n                {\n                    \"name\": \"value\",\n                    \"type\": \"Uint256\"\n                }\n            ],\n            \"keys\": [],\n            \"name\": \"Transfer\",\n            \"type\": \"event\"\n        },\n        {\n            \"data\": [\n                {\n                    \"name\": \"owner\",\n                    \"type\": \"felt\"\n                },\n                {\n                    \"name\": \"spender\",\n                    \"type\": \"felt\"\n                },\n                {\n                    \"name\": \"value\",\n                    \"type\": \"Uint256\"\n                }\n            ],\n            \"keys\": [],\n            \"name\": \"Approval\",\n            \"type\": \"event\"\n        },\n        {\n            \"inputs\": [\n                {\n                    \"name\": \"name\",\n                    \"type\": \"felt\"\n                },\n                {\n                    \"name\": \"symbol\",\n                    \"type\": \"felt\"\n                },\n                {\n                    \"name\": \"decimals\",\n                    \"type\": \"felt\"\n                },\n                {\n                    \"name\": \"initial_supply\",\n                    \"type\": \"Uint256\"\n                },\n                {\n                    \"name\": \"recipient\",\n                    \"type\": \"felt\"\n                }\n            ],\n            \"name\": \"constructor\",\n            \"outputs\": [],\n            \"type\": \"constructor\"\n        },\n        {\n            \"inputs\": [],\n            \"name\": \"name\",\n            \"outputs\": [\n                {\n                    \"name\": \"name\",\n                    \"type\": \"felt\"\n                }\n            ],\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n        },\n        {\n            \"inputs\": [],\n            \"name\": \"symbol\",\n            \"outputs\": [\n                {\n                    \"name\": \"symbol\",\n                    \"type\": \"felt\"\n                }\n            ],\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n        },\n        {\n            \"inputs\": [],\n            \"name\": \"totalSupply\",\n            \"outputs\": [\n                {\n                    \"name\": \"totalSupply\",\n                    \"type\": \"Uint256\"\n                }\n            ],\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n        },\n        {\n            \"inputs\": [],\n            \"name\": \"decimals\",\n            \"outputs\": [\n                {\n                    \"name\": \"decimals\",\n                    \"type\": \"felt\"\n                }\n            ],\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n        },\n        {\n            \"inputs\": [\n                {\n                    \"name\": \"account\",\n                    \"type\": \"felt\"\n                }\n            ],\n            \"name\": \"balanceOf\",\n            \"outputs\": [\n                {\n                    \"name\": \"balance\",\n                    \"type\": \"Uint256\"\n                }\n            ],\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n        },\n        {\n            \"inputs\": [\n                {\n                    \"name\": \"owner\",\n                    \"type\": \"felt\"\n                },\n                {\n                    \"name\": \"spender\",\n                    \"type\": \"felt\"\n                }\n            ],\n            \"name\": \"allowance\",\n            \"outputs\": [\n                {\n                    \"name\": \"remaining\",\n                    \"type\": \"Uint256\"\n                }\n            ],\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n        },\n        {\n            \"inputs\": [\n                {\n                    \"name\": \"recipient\",\n                    \"type\": \"felt\"\n                },\n                {\n                    \"name\": \"amount\",\n                    \"type\": \"Uint256\"\n                }\n            ],\n            \"name\": \"transfer\",\n            \"outputs\": [\n                {\n                    \"name\": \"success\",\n                    \"type\": \"felt\"\n                }\n            ],\n            \"type\": \"function\"\n        },\n        {\n            \"inputs\": [\n                {\n                    \"name\": \"sender\",\n                    \"type\": \"felt\"\n                },\n                {\n                    \"name\": \"recipient\",\n                    \"type\": \"felt\"\n                },\n                {\n                    \"name\": \"amount\",\n                    \"type\": \"Uint256\"\n                }\n            ],\n            \"name\": \"transferFrom\",\n            \"outputs\": [\n                {\n                    \"name\": \"success\",\n                    \"type\": \"felt\"\n                }\n            ],\n            \"type\": \"function\"\n        },\n        {\n            \"inputs\": [\n                {\n                    \"name\": \"spender\",\n                    \"type\": \"felt\"\n                },\n                {\n                    \"name\": \"amount\",\n                    \"type\": \"Uint256\"\n                }\n            ],\n            \"name\": \"approve\",\n            \"outputs\": [\n                {\n                    \"name\": \"success\",\n                    \"type\": \"felt\"\n                }\n            ],\n            \"type\": \"function\"\n        },\n        {\n            \"inputs\": [\n                {\n                    \"name\": \"spender\",\n                    \"type\": \"felt\"\n                },\n                {\n                    \"name\": \"added_value\",\n                    \"type\": \"Uint256\"\n                }\n            ],\n            \"name\": \"increaseAllowance\",\n            \"outputs\": [\n                {\n                    \"name\": \"success\",\n                    \"type\": \"felt\"\n                }\n            ],\n            \"type\": \"function\"\n        },\n        {\n            \"inputs\": [\n                {\n                    \"name\": \"spender\",\n                    \"type\": \"felt\"\n                },\n                {\n                    \"name\": \"subtracted_value\",\n                    \"type\": \"Uint256\"\n                }\n            ],\n            \"name\": \"decreaseAllowance\",\n            \"outputs\": [\n                {\n                    \"name\": \"success\",\n                    \"type\": \"felt\"\n                }\n            ],\n            \"type\": \"function\"\n        }\n    ]"],"names":[],"version":3,"file":"main.js.map"}